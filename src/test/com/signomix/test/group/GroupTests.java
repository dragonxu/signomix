/*
 * Copyright 2017 Grzegorz Skorupa <g.skorupa at gmail.com>.
 * Licensed under the Apache License, Version 2.0. See LICENSE file.
 */
package com.signomix.test.group;

import com.signomix.out.iot.Device;
import java.io.UnsupportedEncodingException;
import org.cricketmsf.in.http.StandardResult;
import org.cricketmsf.out.http.HttpClient;
import org.cricketmsf.out.http.Request;
import org.junit.*;
import org.junit.runners.MethodSorters;
import com.signomix.test.ServiceWrapper;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.cricketmsf.exception.AdapterException;

/**
 *
 * @author Grzegorz Skorupa <g.skorupa at gmail.com>
 */
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class GroupTests {

    public GroupTests() {
    }

    @Test
    public void a_creatingGroupAutogeneratedEui() {
        String responseData = "";
        int responseCode = -1;
        String sessionToken = getSessionToken("tester1", "signomix", "http://localhost:8080/api/auth");
        System.out.println("@sessionToken=" + sessionToken);
        // Given
        String apiEndpoint = "http://localhost:8080/api/iot/group";

        List<NameValuePair> docParameters = new ArrayList<NameValuePair>();
        docParameters.add(new BasicNameValuePair("name", "testGroup"));
        docParameters.add(new BasicNameValuePair("description", "test description"));
        docParameters.add(new BasicNameValuePair("userID", "tester1"));
        docParameters.add(new BasicNameValuePair("channels", "t,h"));
        docParameters.add(new BasicNameValuePair("team", "admin"));

        // When
        try {
            CloseableHttpClient httpclient = HttpClients.createDefault();
            HttpPost httpPost = new HttpPost(apiEndpoint);
            httpPost.setHeader("Authentication", sessionToken);
            httpPost.setEntity(new UrlEncodedFormEntity(docParameters));
            CloseableHttpResponse response2 = httpclient.execute(httpPost);
            try {
                responseCode = response2.getStatusLine().getStatusCode();
                System.out.println(response2.getStatusLine());
                HttpEntity entity2 = response2.getEntity();
                responseData = EntityUtils.toString(entity2);
                EntityUtils.consume(entity2);
            } finally {
                response2.close();
            }
        } catch (IOException e) {
            Assert.fail(e.getMessage());
        }

        // Then
        Assert.assertEquals(201, responseCode);
        Assert.assertNotNull("empty group EUI", responseData);
        System.out.println(responseData);
    }

    @Test
    public void b_creatingGroupProvidedEui() {
        String responseData = "";
        int responseCode = -1;
        String sessionToken = getSessionToken("tester1", "signomix", "http://localhost:8080/api/auth");
        System.out.println("@sessionToken=" + sessionToken);
        // Given
        String apiEndpoint = "http://localhost:8080/api/iot/group";

        List<NameValuePair> docParameters = new ArrayList<NameValuePair>();
        docParameters.add(new BasicNameValuePair("eui", "A"));
        docParameters.add(new BasicNameValuePair("name", "testGroup2"));
        docParameters.add(new BasicNameValuePair("description", "test description"));
        docParameters.add(new BasicNameValuePair("userID", "tester1"));
        docParameters.add(new BasicNameValuePair("channels", "t,h"));
        docParameters.add(new BasicNameValuePair("team", "admin"));

        // When
        try {
            CloseableHttpClient httpclient = HttpClients.createDefault();
            HttpPost httpPost = new HttpPost(apiEndpoint);
            httpPost.setHeader("Authentication", sessionToken);
            httpPost.setEntity(new UrlEncodedFormEntity(docParameters));
            CloseableHttpResponse response2 = httpclient.execute(httpPost);
            try {
                responseCode = response2.getStatusLine().getStatusCode();
                System.out.println(response2.getStatusLine());
                HttpEntity entity2 = response2.getEntity();
                responseData = EntityUtils.toString(entity2);
                EntityUtils.consume(entity2);
            } finally {
                response2.close();
            }
        } catch (IOException e) {
            Assert.fail(e.getMessage());
        }

        // Then
        Assert.assertEquals(201, responseCode);
        Assert.assertNotNull("empty group EUI", responseData);
        System.out.println(responseData);
    }

    @Test
    public void c_readingGroup() {
        // Given
        String sessionToken = getSessionToken("tester1", "signomix", "http://localhost:8080/api/auth");
        String eui = "A";
        HttpClient client = new HttpClient().setCertificateCheck(false);
        Request req = new Request()
                .setMethod("GET")
                .setProperty("Authentication", sessionToken)
                .setProperty("Accept", "application/json")
                .setUrl("http://localhost:8080/api/iot/group/" + eui);
        // When
        StandardResult response = null;
        try {
            response = (StandardResult) client.send(req, false);
        } catch (AdapterException e) {
            Assert.fail(e.getMessage());
        }
        // Then
        Assert.assertEquals(200, response.getCode());
    }

    @Test
    public void d_createDevices() {
        //griup A *2
        //group B*1
        String sessionToken = getSessionToken("admin", "test123", "http://localhost:8080/api/auth");
        System.out.println("@sessionToken=" + sessionToken);
        // Given
        String apiEndpoint = "http://localhost:8080/api/iot/device";
        Device d1 = new Device();
        d1.setEUI("DA");
        d1.setChannels("t,h");
        d1.setName("d1");
        d1.setGroups("A");
        d1.setUserID("admin");
        d1.setKey("key1");
        Device d2 = new Device();
        d2.setEUI("DB");
        d2.setChannels("t,h");
        d2.setName("d2");
        d2.setGroups("A");
        d2.setUserID("admin");
        d2.setKey("key2");
        Device d3 = new Device();
        d3.setEUI("DC");
        d3.setChannels("t,h");
        d3.setName("d3");
        d3.setGroups("B");
        d3.setUserID("admin");
        d3.setKey("key3");

        //When
        registerDevice(apiEndpoint, sessionToken, d1);
        registerDevice(apiEndpoint, sessionToken, d2);
        registerDevice(apiEndpoint, sessionToken, d3);

        //Then
        //Assert.fail();
    }

    @Test
    public void e_sendData() {
        // Given
        String apiEndpoint = "http://localhost:8080/api/i4t";
        HashMap<String, Double> d1 = new HashMap<>();
        HashMap<String, Double> d2 = new HashMap<>();
        HashMap<String, Double> d3 = new HashMap<>();
        d1.put("t", 10.1);
        d1.put("h", 20.1);
        d2.put("t", 10.2);
        d2.put("h", 20.2);
        d3.put("t", 10.3);
        d3.put("h", 20.3);

        //When
        sendData(apiEndpoint, "key1", "DA", d1);
        sendData(apiEndpoint, "key2", "DB", d2);
        sendData(apiEndpoint, "key3", "DC", d3);
    }

    @Test
    public void f_readData() {
        String sessionToken = getSessionToken("admin", "test123", "http://localhost:8080/api/auth");
        String eui = "DA";
        String channel = "t,h";
        HttpClient client = new HttpClient().setCertificateCheck(false);
        Request req = new Request()
                .setMethod("GET")
                .setProperty("Authentication", sessionToken)
                .setProperty("Accept", "application/json")
                .setUrl("http://localhost:8080/api/iot/device/" + eui + "/" + channel);
        // When
        StandardResult response = null;
        try {
            response = (StandardResult) client.send(req, false);
        } catch (AdapterException e) {
            Assert.fail(e.getMessage());
        }
        // Then
        //System.out.println("DATA: "+new String(response.getPayload()));
        Assert.assertEquals(200, response.getCode());
        Assert.assertTrue("result is probably not JSON", response.getPayload().length > 4);
    }

    @Test
    public void g_readGroupData() {
        String sessionToken = getSessionToken("admin", "test123", "http://localhost:8080/api/auth");
        String eui = "A";
        String channel = "t,h";
        HttpClient client = new HttpClient().setCertificateCheck(false);
        Request req = new Request()
                .setMethod("GET")
                .setProperty("Authentication", sessionToken)
                .setProperty("Accept", "application/json")
                .setUrl("http://localhost:8080/api/iot/group/" + eui + "/" + channel);
        // When
        StandardResult response = null;
        try {
            response = (StandardResult) client.send(req, false);
        } catch (AdapterException e) {
            Assert.fail(e.getMessage());
        }        // Then
        System.out.println("DATA: " + new String(response.getPayload()));
        Assert.assertEquals(200, response.getCode());
        Assert.assertTrue("result is probably not JSON", response.getPayload().length > 4);
    }

    private void registerDevice(String apiEndpoint, String sessionToken, Device d) {
        int responseCode = -1;
        String responseData;
        List<NameValuePair> dParameters = new ArrayList<NameValuePair>();
        dParameters.add(new BasicNameValuePair("eui", d.getEUI()));
        dParameters.add(new BasicNameValuePair("name", d.getName()));
        dParameters.add(new BasicNameValuePair("key", d.getKey()));
        dParameters.add(new BasicNameValuePair("groups", d.getGroups()));
        dParameters.add(new BasicNameValuePair("channels", d.getChannelsAsString()));
        try {
            CloseableHttpClient httpclient = HttpClients.createDefault();
            HttpPost httpPost = new HttpPost(apiEndpoint);
            httpPost.setHeader("Authentication", sessionToken);
            httpPost.setEntity(new UrlEncodedFormEntity(dParameters));
            CloseableHttpResponse response2 = httpclient.execute(httpPost);
            try {
                responseCode = response2.getStatusLine().getStatusCode();
                System.out.println(response2.getStatusLine());
                HttpEntity entity2 = response2.getEntity();
                responseData = EntityUtils.toString(entity2);
                EntityUtils.consume(entity2);
            } finally {
                response2.close();
            }
        } catch (IOException e) {
            Assert.fail(e.getMessage());
        }
        Assert.assertEquals(201, responseCode);
    }

    private void sendData(String apiEndpoint, String deviceKey, String deviceEUI, HashMap<String, Double> values) {
        int responseCode = -1;
        String responseData;
        List<NameValuePair> dParameters = new ArrayList<NameValuePair>();
        dParameters.add(new BasicNameValuePair("eui", deviceEUI));
        values.entrySet().forEach(entry -> {
            dParameters.add(new BasicNameValuePair(entry.getKey(), "" + entry.getValue()));
        });
        try {
            CloseableHttpClient httpclient = HttpClients.createDefault();
            HttpPost httpPost = new HttpPost(apiEndpoint);
            httpPost.setHeader("Authorization", deviceKey);
            httpPost.setEntity(new UrlEncodedFormEntity(dParameters));
            CloseableHttpResponse response2 = httpclient.execute(httpPost);
            try {
                responseCode = response2.getStatusLine().getStatusCode();
                System.out.println(response2.getStatusLine());
                HttpEntity entity2 = response2.getEntity();
                responseData = EntityUtils.toString(entity2);
                EntityUtils.consume(entity2);
            } finally {
                response2.close();
            }
        } catch (IOException e) {
            Assert.fail(e.getMessage());
        }
        Assert.assertEquals(201, responseCode);
    }

    @BeforeClass
    public static void setup() {
        ServiceWrapper.setup();
    }

    @AfterClass
    public static void shutdown() {
        ServiceWrapper.shutdown();

    }

    private String getSessionToken(String login, String password, String authEndpoint) {
        String credentials = Base64.getEncoder().encodeToString((login + ":" + password).getBytes());
        HttpClient client = new HttpClient().setCertificateCheck(false);
        Request req = new Request()
                .setMethod("POST")
                .setProperty("Accept", "text/plain")
                .setProperty("Authentication", "Basic " + credentials)
                .setData("p=ignotethis") /*data must be added to POST or PUT requests */
                .setUrl(authEndpoint);
        StandardResult response = null;
        try {
            response = (StandardResult) client.send(req, false);
        } catch (AdapterException e) {
            Assert.fail(e.getMessage());
        }
        String token;
        try {
            token = new String(response.getPayload(), "UTF-8");
        } catch (UnsupportedEncodingException ex) {
            return "error";
        }
        return token;
    }
}

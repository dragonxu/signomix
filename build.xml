<?xml version="1.0" encoding="UTF-8"?>
<project name="signomix-ce" default="all" basedir="." 
         xmlns:if="ant:if"
         xmlns:unless="ant:unless">
    
    <!-- ################################################################### -->
    <!--                                                                     -->
    <!-- BUILD CONFIGURATION                                                 -->
    <!--                                                                     -->
    <!-- Remember to modify the project name (see line 2 of this file)       -->
    <!--                                                                     -->
    <description>Signomix</description>
    <property file="local.build.properties"/>
    <property name="version" value="1.3.0"/> <!-- service version           -->
    <property name="cricket-version" value="1.5.11" /> 
    <property name="cricket-jar-location" value="lib/cricket-${cricket-version}.jar"/>
    <property name="docker-repository" value="" />
    <property name="JDK-location" value=""/>
    <!--
    <property name="JDK-location" value="/usr/lib/jvm/java-11-openjdk-amd64"/>
    -->
    <property name="minify" value="false" />
    <!-- configuration of libraries included in the distribution fat-jar     -->
    <!-- set value=false to exclude selected library           -->
    <property name="module-jsonpath" value="true"/>
    <property name="json-org-jar-location" value="lib/json-org.jar"/>
    <!-- Doclet -->
    <property name="livingdocumentation-lib" value="lib/LivingDocumentation.jar"/>
    
    <!-- libraries used by local extension -->
    <property name="locallib-1" value="false"/>
    <property name="locallib-1-location" value="lib/locallib-1.jar"/>
    
    <!--                                                                     -->
    <!-- END OF CONFIGURATION                                                -->
    <!-- ################################################################### -->

    <!-- do not modify properties below -->
    <property name="src" location="src/java"/>
    <property name="src-js" location="src/js"/>
    <property name="src-other" location="src/other"/>
    <property name="tests" location="src/test"/>
    <property name="reports" location="reports"/>
    <property name="build" location="build/classes"/>
    <property name="build.test" location="build/test"/>
    <property name="dist" location="dist"/>
    <property name="web" location="web"/>
    <property name="lib" location="lib"/>
    
    <path id="project-classpath">
        <pathelement location="${cricket-jar-location}"/>
        <pathelement location="${json-org-jar-location}"/>
        <pathelement location="${livingdocumentation-lib}"/>
        <pathelement location="${locallib-1-location}"/>
    </path>

    <target name="init">
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
        <mkdir dir="${build.test}"/>
        <mkdir dir="${reports}"/>
    </target>
   
    <target name="get-dependencies" description="upload Cricket MSF library">
        <mkdir dir="${lib}"/>
        <get
            src="https://github.com/gskorupa/cricket/releases/download/${cricket-version}/cricket-${cricket-version}.jar"
            dest="lib" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="https://github.com/gskorupa/cricket/releases/download/${cricket-version}/cricket-${cricket-version}-javadoc.jar"
            dest="lib" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="http://search.maven.org/remotecontent?filepath=junit/junit/4.12/junit-4.12.jar"
            dest="lib" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="http://search.maven.org/remotecontent?filepath=org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"
            dest="lib" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="http://central.maven.org/maven2/org/apache/httpcomponents/httpclient/4.5.5/httpclient-4.5.5.jar"
            dest="lib" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="http://central.maven.org/maven2/org/apache/httpcomponents/httpcore/4.4.9/httpcore-4.4.9.jar"
            dest="lib" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="http://central.maven.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.jar"
            dest="lib" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="https://repo1.maven.org/maven2/org/json/json/20190722/json-20190722.jar"
            dest="lib/json-org.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <!--        
        <get
            src="https://search.maven.org/remotecontent?filepath=com/sun/xml/bind/jaxb-impl/2.4.0-b180830.0438/jaxb-impl-2.4.0-b180830.0438.jar"
            dest="lib/jaxb-impl-2.4.0.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="https://search.maven.org/remotecontent?filepath=javax/xml/bind/jaxb-api/2.4.0-b180830.0359/jaxb-api-2.4.0-b180830.0359.jar"
            dest="lib/jaxb-api-2.4.0.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        <get
            src="https://search.maven.org/remotecontent?filepath=com/sun/xml/bind/jaxb-core/2.3.0.1/jaxb-core-2.3.0.1.jar"
            dest="lib/jaxb-core-2.3.0.1.jar" 
            usetimestamp="true" 
            ignoreerrors="true"
        />
        -->
    </target>

    <target name="compile" depends="init" description="compile the source">
        <input message="Please enter release type:" validargs="standard,mini" addproperty="releaseType" defaultvalue="standard"/>
        <echo message="Compiling release type: ${releaseType}"/>
        <copy overwrite="true" file="${src}/com/signomix/Invariants.template" tofile="${src}/com/signomix/Invariants.java"/>
        <replace file="${src}/com/signomix/Invariants.java" token="{{type}}" value="${releaseType}"/>
        <!-- Compile the java code from ${src} into ${build} -->
        <javac unless:blank="${JDK-location}" 
               executable="${JDK-location}/bin/javac" 
               fork="true" 
               target="1.8" 
               source="1.8" 
               srcdir="${src}" 
               destdir="${build}" 
               includeantruntime="false" 
               debug="on" 
               classpathref="project-classpath" verbose="false">
               <!-- <compilerarg value="-Xlint:unchecked"/> -->
        </javac>
        <javac if:blank="${JDK-location}"
            target="1.8" 
            source="1.8" 
            srcdir="${src}" 
            destdir="${build}"
            includeantruntime="false" 
            debug="on"
            classpathref="project-classpath">
            <!--<compilerarg value="-Xlint:unchecked"/>-->
        </javac>
        <delete file="${src}/com/signocom/signode/Invariants.original" failonerror="false"/>
        <copy todir="${build}" file="${src-js}/device-script-template.js"/>
        <copy todir="${build}" file="${src-js}/payload-decoder-envelope.js"/>
    </target>
    <target name="compile.tests" depends="init" description="compile test cases">
        <javac 
            target="1.8" 
            source="1.8" 
            srcdir="${tests}" 
            destdir="${build.test}"
            includeantruntime="false" 
            debug="on"
            classpathref="project-classpath">
            <classpath>
                <pathelement path="${build}"/>
                <pathelement path="${build.test}"/>
                <pathelement location="${lib}/junit-4.12.jar"/>
                <pathelement location="${lib}/httpclient-4.5.5.jar"/>
                <pathelement location="${lib}/httpcore-4.4.9.jar"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
            <!--<compilerarg value="-Xlint:unchecked"/>-->
        </javac>
    </target>
    <target name="build-webapps" depends="init" description="Build web applications">
        <exec executable="npm" dir="webapp/blog">
            <arg value="install"/>
        </exec>
        <exec executable="npm" dir="webapp/blog">
            <arg value="run"/>
            <arg value="build"/>
        </exec>
    </target>
    <target name="dist" depends="clean, compile, build-webapps"
            description="generate the distribution">
        <!-- Create the distribution directory -->
        <mkdir dir="${dist}"/>
        <antcall inheritall="true" target="jar"/>
        <mkdir dir="${dist}/config"/>
        <mkdir dir="${dist}/files"/>
        <mkdir dir="${dist}/data"/>
        <mkdir dir="${dist}/www"/>
        <mkdir dir="${dist}/www/assets"/>
        <mkdir dir="${dist}/var"/>
        <input message="Please enter environment name:" validargs="dev,compose,localdev" addproperty="environment.name" defaultvalue="dev"/>
        <echo message="Building archive for environment: ${environment.name}"/>
        <delete file="${dist}/data/cricket_publickeystore.jks" failonerror="false"></delete>
        <genkey alias="cricket" 
                keystore="${dist}/data/cricket_publickeystore.jks" 
                storepass="storepass" 
                keypass="keypass" 
                keyalg="RSA" 
                keysize="2048" 
                validity="720">
            <dname>
                <param name="CN" value="test.com"/>
                <param name="O" value="test company"/>
            </dname>
        </genkey>
        <copy todir="${dist}/www">
            <fileset dir="www" excludes="**/*.svg,**/*.png,**/*.gif,**/*.jpg,**/*.jpeg,**/*.otf,,**/*.eot,**/*.ttf,**/*.woff,**/*.woff2"/>
            <filterchain if:true="${minify}">
                <tokenfilter>
                    <deletecharacters chars="\r"/>
                    <trim/>
                    <ignoreblank/>
                </tokenfilter>
                <striplinecomments>
                    <comment value="&lt;!"/>
                </striplinecomments>
                <striplinecomments>
                    <comment value="app.log("/>
                </striplinecomments>
            </filterchain>
        </copy>
        <copy todir="${dist}/www">
            <fileset dir="www" includes="**/*.svg,**/*.png,**/*.gif,**/*.jpg,**/*.jpeg,**/*.otf,,**/*.eot,**/*.ttf,**/*.woff,**/*.woff2"/>
        </copy>
        <copy todir="${dist}/www/blog" overwrite="true">
            <fileset dir="webapp/blog/public"/>
        </copy>
        <echo message="Building archive for environment ${environment.name}"/>
        <copy todir="${dist}/config" file="${src-other}/environment/${environment.name}/settings.json"/>
        <copy todir="${dist}" file="${src-other}/environment/${environment.name}/run.sh"/>
        <copy todir="${dist}" file="${src-other}/environment/${environment.name}/readme.txt"/>
        <replace file="${dist}/run.sh" token="{{distribution}}" value="${ant.project.name}-${version}"/>
        <replace file="${dist}/www/admin/components/app_main.tag" token="cricket-version" value="${cricket-version}"/>
        <replace file="${dist}/www/admin/components/app_main.tag" token="app-version" value="${version}"/>
        <!--<antcall target="restore"/>-->
        <zip basedir="dist" destfile="signomix.zip"/>
    </target>

    <target name="clean" description="clean up">
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
    </target>
    
    <target name="jar">
        <copy todir="${build}" overwrite="true">
            <fileset dir="${src}" includes="*.json"/>
            <fileset dir="${src}" includes="*.txt"/>
        </copy>
        <jar destfile="${dist}/${ant.project.name}-${version}.jar">
            <manifest>
                <attribute name="Main-Class" value="org.cricketmsf.Runner"/>
            </manifest>
            <zipfileset src="${cricket-jar-location}" excludes="**/*.json" includes="**/*"/>
            <fileset dir="${build}" />
            <!-- optional libraries -->
            <zipfileset if:true="${module-jsonpath}" src="${json-org-jar-location}" includes="org/**/*"/>
            <!-- libraries used by local extension -->
            <zipfileset if:true="${locallib-1}" src="${locallib-1-location}" includes="**/*"/>
        </jar>
    </target>
    
    <target name="docker-build" depends="dist" description="create new tagged image">
        <!-- update Dockerfile -->
        <copy file="${src-other}/environment/${environment.name}/Dockerfile.template" tofile="Dockerfile" overwrite="true"/>
        <replace file="Dockerfile" token="{{version}}" value="${version}"/>
        <exec executable="docker">
            <arg value="build"/>
            <arg value="-t"/>
            <arg value="${docker-repository}/${ant.project.name}:${version}"/>
            <arg value="."/>
        </exec>
    </target>
    
    <target name="docker-push" description="push current image to the repository">
        <input message="Please enter environment name [dev|production]:" addproperty="environment.name" defaultvalue="dev"/>
        <echo message="Pushing container for environment: ${environment.name}"/>
        <exec executable="docker">
            <arg value="push"/>
            <arg value="${docker-repository}/${ant.project.name}:${version}"/>
        </exec>
    </target>

    <target name="docker-run" depends="jar" description="create and run the new container">
        <!-- TODO: remove existing container of the same name -->
        <exec executable="docker">
            <arg value="run"/>
            <arg value="-d"/>
            <arg value="-p"/>
            <arg value="127.0.0.1:8080:8080"/>
            <arg value="-v"/>
            <arg value="${basedir}/data:/usr/signomix/data"/>
            <arg value="--name"/>
            <arg value="${ant.project.name}"/>
            <arg value="${docker-repository}/${ant.project.name}:${version}"/>
        </exec>
    </target>
    
    <target name="docker-start" description="start stopperd container">
        <exec executable="docker">
            <arg value="start"/>
            <arg value="${ant.project.name}"/>
        </exec>
    </target>
    
    <target name="docker-stop" description="stop running container">
        <exec executable="docker">
            <arg value="stop"/>
            <arg value="${ant.project.name}"/>
        </exec>
    </target>
    
    <target name="run" description="run local distribution">
        <exec 
            dir="${dist}"
            executable="java">
            <arg value="-jar"/>
            <arg value="${ant.project.name}-${version}.jar"/>
            <arg value="-r"/>
            <arg value="-c"/>
            <arg value="config/settings.json"/>
        </exec>
    </target>
    <target name="get-signomix">
        <!-- -->
    </target>
    <target name="test" depends="compile.tests">
        <delete dir="${reports}"/>
        <mkdir dir="${reports}/work/log"/>
        <junit fork="yes" printsummary="yes" showoutput="yes" dir="${reports}">
            <classpath>
                <pathelement path="${build}"/>
                <pathelement path="${build.test}"/>
                <pathelement location="${cricket-jar-location}"/>
                <pathelement location="${lib}/junit-4.12.jar"/>
                <pathelement location="${lib}/hamcrest-core-1.3.jar"/>
                <pathelement location="${lib}/httpclient-4.5.5.jar"/>
                <pathelement location="${lib}/httpcore-4.4.9.jar"/>
                <pathelement location="${lib}/commons-logging-1.2.jar"/>
                <pathelement path="${java.class.path}"/>
            </classpath>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
            <test name="com.signomix.test.group.GroupTests" haltonfailure="no" todir="${reports}"/>
        </junit>
        <junitreport todir="${reports}">
            <fileset dir="${reports}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${reports}/html"/>
        </junitreport>
    </target>
    <target name="backup-db">
        <input message="Please enter environment name [dev|demo|demo2|production|ec1-dev|ec1]:" addproperty="environment.name" defaultvalue="dev"/>
        <copy todir="backup/${environment.name}/db" overwrite="true">
            <fileset dir="dist/data"/>
        </copy>
        <copy todir="backup/${environment.name}/files" overwrite="true">
            <fileset dir="dist/files"/>
        </copy>
        <copy todir="backup/${environment.name}/assets" overwrite="true">
            <fileset dir="dist/www/assets"/>
        </copy>
    </target>
    
    <target name="restore-db">
        <input message="Please enter environment name to restore [dev|demo|demo2|production|ec1-dev|ec1]:" addproperty="environment.name" defaultvalue="dev"/>
        <copy todir="dist/data" overwrite="true">
            <fileset dir="backup/${environment.name}/db"/>
        </copy>
        <copy todir="dist/files" overwrite="true">
            <fileset dir="backup/${environment.name}/files"/>
        </copy>
        <copy todir="dist/www/assets" overwrite="true">
            <fileset dir="backup/${environment.name}/assets"/>
        </copy>
    </target>

</project>
